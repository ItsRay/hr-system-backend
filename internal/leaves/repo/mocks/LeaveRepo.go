// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	employeesrepo "hr-system/internal/employees/repo"
	domain "hr-system/internal/leaves/domain"

	mock "github.com/stretchr/testify/mock"
)

// LeaveRepo is an autogenerated mock type for the LeaveRepo type
type LeaveRepo struct {
	mock.Mock
}

// CreateLeave provides a mock function with given fields: ctx, leave
func (_m *LeaveRepo) CreateLeave(ctx context.Context, leave *domain.Leave) error {
	ret := _m.Called(ctx, leave)

	if len(ret) == 0 {
		panic("no return value specified for CreateLeave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Leave) error); ok {
		r0 = rf(ctx, leave)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLeaveByID provides a mock function with given fields: ctx, id
func (_m *LeaveRepo) GetLeaveByID(ctx context.Context, id int) (domain.Leave, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLeaveByID")
	}

	var r0 domain.Leave
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.Leave, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.Leave); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Leave)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLeaves provides a mock function with given fields: ctx, query
func (_m *LeaveRepo) GetLeaves(ctx context.Context, query domain.LeavesQuery) ([]domain.Leave, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetLeaves")
	}

	var r0 []domain.Leave
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.LeavesQuery) ([]domain.Leave, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.LeavesQuery) []domain.Leave); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Leave)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.LeavesQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SeedData provides a mock function with given fields: ctx, employeeRepo
func (_m *LeaveRepo) SeedData(ctx context.Context, employeeRepo employeesrepo.EmployeeRepo) error {
	ret := _m.Called(ctx, employeeRepo)

	if len(ret) == 0 {
		panic("no return value specified for SeedData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, employeesrepo.EmployeeRepo) error); ok {
		r0 = rf(ctx, employeeRepo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLeaveAndReviews provides a mock function with given fields: ctx, leave, reviews
func (_m *LeaveRepo) UpdateLeaveAndReviews(ctx context.Context, leave *domain.Leave, reviews []domain.LeaveReview) error {
	ret := _m.Called(ctx, leave, reviews)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLeaveAndReviews")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Leave, []domain.LeaveReview) error); ok {
		r0 = rf(ctx, leave, reviews)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLeaveRepo creates a new instance of LeaveRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLeaveRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *LeaveRepo {
	mock := &LeaveRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
